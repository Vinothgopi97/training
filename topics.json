{
    "topics": [
        {
            "sl_no": 0,
            "title": "Pre-requisites",
            "subtopics": [
                {
                    "sl_no": 1,
                    "title": "Softwares Installation",
                    "description": "Here are the references for downloading and installing many softwares. Installing only required softwares out of these is enough.",
                    "references": [
                        {
                            "title": "Git",                            
                            "link": "https://git-scm.com/downloads"
                        },
                        {
                            "title": "VS Code",
                            "link": "https://code.visualstudio.com/download"                           
                        },
                        { 
                            "title": "IntelliJ",
                            "link": "https://www.jetbrains.com/idea/download/"
                        },
                        {
                            "title": "Java JDK",
                            "link": "https://www.oracle.com/java/technologies/downloads/"
                        },
                        {
                            "title": "Node.js",
                            "link": "https://nodejs.org/en/download/"
                        },                        
                        {
                            "title": "Postman",
                            "link": "https://www.postman.com/downloads/"
                        },
                        {
                            "title": "Docker",
                            "link": "https://www.docker.com/products/docker-desktop/"
                        },
                        {
                            "title": "MySQL",
                            "link": "https://dev.mysql.com/downloads/installer/"
                        },
                        {
                            "title": "MongoDB Community Server",
                            "link": "https://www.mongodb.com/try/download/community"
                        },                        
                        {
                            "title": "MongoDB Compass",
                            "link": "https://www.mongodb.com/try/download/compass"
                        },                        
                        {
                            "title": "PostgreSQL",
                            "link": "https://www.postgresql.org/download/"
                        }
                    ],
                    "assignment": [
                        "Install Git",
                        "Install VS Code",
                        "Install IntelliJ, suggested for Java",
                        "Install Java JDK",
                        "Install PostgreSQL",
                        "Install Postman"
                    ]
                },
                {
                    "sl_no": 2,
                    "title": "Account Creations",
                    "description": "Here are the references for creating accounts in required platforms.",
                    "references": [
                        {
                            "title": "Github", 
                            "link": "https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home"
                        }
                    ]
                }
            ]
        },
        {
        "sl_no": "updates",
        "title": "Recent updates",
        "subtopics": [
            {
                "sl_no": 1,
                "title": "Updates",
                "description": "This section contains the recent updates made to the course materials.",
                "content_html": "updates_view.html",
                "references": [                    
                ]
            }]
        },
      {
        "sl_no": 1,
        "title": "Computer Basics & OS Overview",
        "subtopics": [
            {
                "sl_no": 1,
                "title": "Basics of Computer",
                "description": "Understanding the basic components of a computer system, including CPU, RAM, and storage.",           
                "references": [
                    {
                        "title": "Basics of Computer",
                        "link": "https://youtu.be/-AP1nNK3bRs?list=PLWPirh4EWFpF_2T13UeEgZWZHc8nHBuXp"
                    },
                    {
                         "title": "Working of Transistors in Computer. In Tamil",
                        "link": "https://youtu.be/8I_fgfL4260?si=oDlM75b3rrIvvzkg"
                       
                    }, {
                        "title":"Types  of Memory in Computer",
                        "link":"https://www.upgrad.com/blog/types-of-memory-in-computer/"
                    }, {
                        "title":"RAM vs ROM in Tamil",
                        "link":"https://youtube.com/shorts/QsSTN3dW-Lo?si=3VTQdeQ0scHHAZ2E"
                    }
                ]
            },
            {
                "sl_no": 2,
                "title": "Binary Numbers in Computer",
                "description": "Understanding how computers use binary numbers to represent data and perform calculations.",
                "references": [
                    {
                        "title": "Why do computer understand 0s AND 1s? in Tamil",
                        "link": "https://youtu.be/qmlIvT-mnUY"
                    },
                    {
                        "title": "Why not Quinary? Why Binary? in Tamil",
                        "link": "https://youtu.be/wppTu0BItwQ?si=HfvWwtfWOpte2pmP&t=113"
                    },
                    
                    {
                        "title": "Text Representation in Computer as binary",
                        "link": "https://www.techtarget.com/whatis/definition/binary"
                    }, {
                        "title": "Why Binary is used in computers?",
                        "link": "https://www.convertbinary.com/blog/why-computers-use-binary/"
                    },
                    {
                        "title": "Additional: Binary - Transistors in Computer",
                        "link": "https://youtu.be/nOKPuUo8v7E?si=qE8g_MD8AfWlhZGH"
                    }
                ]
            },
            {
                "sl_no": 3,
                "title": "Logic Gates and Transistors",
                "description": "Understanding the basic building blocks of digital circuits, including AND, OR, NOT gates.",
                "references": [
                    {
                        "title": "Logic Gates and Transistors (English)",
                        "link": "https://youtu.be/INEtYZqtjTo"
                    },
                    {
                        "title": "HOW TRANSISTORS RUN CODE (English)",
                        "link": "https://youtu.be/HjneAhCy2N4"
                    },                    
                    {
                        "title": "Logic Gates demonstration",
                        "link": "https://youtube.com/shorts/DNiGb4fOgtI?si=6IEzkVSRBQnSEdPO"
                        
                    }
                ]
            },
            
            {
                "sl_no": 4,
                "title": "Memory Organization Computer Architecture",
                "description": "Understanding the basic components of a computer system, including CPU, RAM, and storage.",                
                "content_html": "memory_organization.html",
                "references": [
                    {
                        "title": "Memory Organization Computer Architecture",
                        "link": "https://www.geeksforgeeks.org/memory-organisation-in-computer-architecture/"
                    }
                ]
            },
            {
                "sl_no": 5,
                "title": "Operating System",
                "description": "Understanding the role of an operating system in managing hardware and software resources.",                
                "references": [
                    {
                        "title": "Operating System Basics to Advanced",
                        "link": "https://youtu.be/bSTSYcHuKok"
                    }
                ]
                
            },      
            {
                "sl_no": 6,
                "title": "Quiz",
                "description": "Test your knowledge on computer basics and operating systems.",                               
                "content_html": "computer_quiz.html"
                
            }        
        ],
       
        "practice_assignments": ["Binary & hexadecimal conversion", "Diagram a CPU-RAM interaction"]
      },
      {
        "sl_no": 2,
        "title": "Source code management",
        "subtopics": [
            {
                "sl_no": 1,
                "title": "Create and clone a Public Github repository",
                "description": "Create a new public repository named 'myfirstrepo' on GitHub and clone it to your local machine.",
                "references": [
                    {
                        "title": "Create and clone a Github repository",
                        "link": "https://github.com/new"
                    },
                    {
                        "title": "Why Git & Github required?",
                        "link": "https://youtube.com/shorts/e022araag8o?si=FQ4OXvVP6H73Qjrg"
                    },
                    {
                        "title": "Version Control with Git and GitHub (Tamil)",
                        "link": "https://youtu.be/VIBWdLLq9kQ"
                    },
                    {
                        "title": "Git Commands",
                        "link": "https://www.geeksforgeeks.org/git-cheat-sheet/"
                    }                    
                ]
            },
            {
                "sl_no": 2,
                "title": "Assignment",
                "description": "Complete the following tasks:.",
                "content_html": "git_assignment.html",                
                "assignment": [
                    "Create a new branch named 'feature' in your local repository.",
                    "Switch to the 'feature' branch.",
                    "Create a new file named 'feature.txt' and add some content to it.",
                    "Commit the changes with a meaningful message.",
                    "Push the 'feature' branch to the remote repository."
                ]
            }
        ]
    },    
      {
        "sl_no": 3,
        "title": "Programming Language",
        "subtopics": [
            {
                "sl_no": 1,
                "title": "What is a Programming Language?",
                "description": "A programming language is a formal language used to communicate instructions to a computer. It allows developers to write software by expressing logic, operations, and behavior that the machine can eventually execute. Examples: Python, C, Java, JavaScript, etc.",
                "references": [
                    {
                        "title": "What are Programming Languages and How are they Created?",
                        "link": "https://youtu.be/hSPwGniAafE"
                    }
                ],
                "content_html": "programming_language_intro.html"
            },
            {
                "sl_no": 2,
                "title": "Compiler vs Interpreter",
                "description": "Understanding the difference between compilers and interpreters, and how they execute code.",
                "references": [
                    {
                        "title":"Compiler vs Interpreter",
                        "link":"https://youtu.be/E3TDMVETp08"
                    }
                ]
            }
        ]
    },
    {
        "sl_no": 4,
        "title": "Datastructures & Algorithms",
        "subtopics": [
            {
                "sl_no": 1,
                "title": "Introduction to Algorithms",
                "description": "Understanding the basic concepts of algorithms, including time complexity and space complexity.",
                "references": [
                    {
                        "title": "Introduction to Algorithms",
                        "link": "https://www.btechsmartclass.com/data_structures/introduction-to-algorithms.html"
                    }                  
                ],
                "content_html": "algorithm_intro.html"
            },
            {
                "sl_no": 2,
                "title": "Introduction to Data Structures",
                "description": "Understanding the basic concepts of data structures, including arrays, linked lists, stacks, and queues.",
                "references": [
                    {
                        "title": "Introduction to Data Structures",
                        "link": "https://www.w3schools.in/data-structures/intro"
                    }                  
                ],
                "content_html": "data_structures_intro.html"
            }            
        ]
      },
    {
        "sl_no": 5,
        "title": "Java Basics",
        "subtopics": [
            {
                "sl_no": 1,
                "title": "JVM, JDK, JRE",
                "description": "Understanding the Java Virtual Machine (JVM), Java Development Kit (JDK), and Java Runtime Environment (JRE).",
                "references": [
                    {
                        "title": "Differences Between JDK, JRE and JVM",
                        "link": "https://www.geeksforgeeks.org/differences-jdk-jre-jvm/"
                    }, {
                        "title": "JDK, JRE, JVM in Tamil",
                        "link": "https://youtu.be/sSLYk1tp8j4?si=gJOIpJUSFYgIaQxW"
                    }                    
                ],
                "content_html": "jdk_jvm_jre.html"
            },
            {
                "sl_no": 2,
                "title": "JVM Architecture",
                "description": "Understanding the architecture of the Java Virtual Machine (JVM) and its components.",
                "references": [
                    {
                        "title": "Differences Between JDK, JRE and JVM",
                        "link": "https://www.geeksforgeeks.org/jvm-works-jvm-architecture/"
                    }, {
                        "title": "JVM Architecture in Tamil",
                        "link": "https://youtu.be/ytp6m9vhTg8?si=UKPfdPVYCZTPkkQ0"
                    }                    
                ],
                "content_html": "jvm-architecture-explained.html"
            },
            {
                "sl_no": 3,
                "title": "Java Basics",
                "description": "Understanding the basic syntax and structure of Java programs, including variables, data types, and operators.",
                "references": [
                    {
                        "title": "Java Basic Syntax",
                        "link": "https://www.geeksforgeeks.org/java-basic-syntax/"
                    }, 
                    {
                        "title": "Java Keywords",
                        "link": "https://www.geeksforgeeks.org/java-keywords/"
                    },                     
                    {
                        "title": "How Java works in Tamil",
                        "link": "https://youtu.be/gS7azO8ybEc"
                    }                    
                ],
                "content_html": "java_basics.html"
            },
            {
                "sl_no": 4,
                "title": "Java Keywords",
                "description": "Understanding the keywords used in Java programming language, including access modifiers, data types, and control flow statements.",
                "references": [
                    {
                        "title": "Java Keywords",
                        "link": "https://www.geeksforgeeks.org/java-keywords/"
                    }
                ],
                "content_html": "java_keywords_explained.html"
            },
            {
                "sl_no": 5,
                "title": "Java Operators",
                "description": "Understanding the different types of operators in Java, including arithmetic, relational, and logical operators.",
                "references": [
                    {
                        "title": "Java Operators",
                        "link": "https://youtu.be/IyeSMcdM3KY"
                    }
                ],
                "content_html": "java_operators_explained.html"
            },
            {
                "sl_no": 6,
                "title": "Java Access Modifiers",
                "description": "Understanding the access modifiers in Java, including public, private, protected, and default.",
                "references": [
                    {
                        "title": "Java Access Modifiers",
                        "link": "https://youtu.be/XVa1BGP1YPk"
                    }
                ],
                "content_html": "java_access_modifiers_explained.html"
            },
            {
                "sl_no": 7,
                "title": "Java Conditional Statements",
                "description": "Understanding the conditional statements in Java, including if, else if, and switch statements.",
                
                "content_html": "java_expressions_conditionals.html"
            },
            {
                "sl_no": 8,
                "title": "Java Looping Statements",
                "description": "Understanding the looping statements in Java, including for, while, and do-while loops.",
                
                "content_html": "java_loops_explained.html"
            },
            {
                "sl_no": "Code Examples",
                "title": "Java Basics",
                "description": "Explore practical examples of Java basics, including data types, operators, and control flow statements.",
                "content_html": "java_basics_files.html"
            },
            
            {
                "sl_no": "Extras",
                "title": "Getting User Input at Runtime",
                "description": "Understanding how to get user input in Java using Scanner class.",                
                "content_html": "java_scanner_input.html"
            },
            {
                "sl_no": "Assignment",
                "title": "Java Basics Assignment",
                "description": "Complete the following tasks:.",                
                "content_html": "java_assignments.html"
            }
            
            
            
        ],                  
        "practice_assignments": ["Compile Java manually", "View bytecode", "Simulate JVM memory"]
      },
      {
        "sl_no": 6,
        "title": "Java - Object Oriented Programming",
        "subtopics": [
            {
                "sl_no": 1,
                "title": "Introduction to OOP",
                "description": "Understanding the basic concepts of Object-Oriented Programming (OOP), including classes, objects, inheritance, polymorphism, encapsulation, and abstraction.",
                "references": [
                    {
                        "title": "Introduction to OOP",
                        "link": "https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/"
                    }, {
                        "title": "OOP in Tamil",
                        "link": "https://youtu.be/Wu1f1Zqdxxw"
                    }                    
                ],
                "content_html": "java_oop_concepts.html"
            },
            {
                "sl_no": 2,
                "title": "Static Keyword, Class & Instance Variables",
                "description": "Understanding the static keyword in Java, and the difference between class variables and instance variables.",
                "references": [
                    {
                        "title": "Static Keyword",
                        "link": "https://www.geeksforgeeks.org/static-keyword-java/"
                    }, {
                        "title": "Static keyword in Tamil",
                        "link": "https://youtu.be/1C2WpNxq0r0"
                    }                    
                ],
                "content_html": "static_and_class_explanation.html"
            },
             {
                "sl_no": 3,
                "title": "Class",
                "description": "Understanding the concept of classes in Java, including how to define and use them.",
                "references": [
                    {
                        "title": "Class & Objects",
                        "link": "https://www.geeksforgeeks.org/classes-objects-java/"
                    }, {
                        "title": "Class & Objects in Tamil",
                        "link": "https://youtu.be/z_QODD8oors"
                    }                    
                ],
                "content_html": "java_oop_class.html"
            },
             {
                "sl_no": 4,
                "title": "Object",
                "description": "Understanding the concept of objects in Java, including how to create and use them.",
                "references": [
                    {
                        "title": "Class & Objects",
                        "link": "https://www.geeksforgeeks.org/classes-objects-java/"
                    }, {
                        "title": "Class & Objects in Tamil",
                        "link": "https://youtu.be/z_QODD8oors"
                    }                   
                ],
                "content_html": "java_oop_object.html"
            },
             {
                "sl_no": 5,
                "title": "Encapsulation",
                "description": "Understanding the concept of encapsulation in Java, including how to use access modifiers to control access to class members.",
                "references": [
                    {
                        "title": "Encapsulation in Java",
                        "link": "https://www.geeksforgeeks.org/encapsulation-in-java/"
                    }, {
                        "title": "Encapsulation in Java (Tamil)",
                        "link": "https://youtu.be/mRLPsPPJUeE"
                    }                    
                ],
                "content_html": "java_oop_encapsulation.html"
            },
             {
                "sl_no": 6,
                "title": "Abstraction",
                "description": "Understanding the concept of abstraction in Java, including how to use abstract classes and interfaces.",
                "references": [
                    {
                        "title": "Abstract & Interface in Java",
                        "link": "https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-java/"
                    }, {
                        "title": "Abstract Class and Abstract Methods in Java in Tamil",
                        "link": "https://youtu.be/IGy5P9auRZs"
                    } ,{
                        "title": "Interface in Java in Tamil",
                        "link": "https://youtu.be/26fNJRePfQ8"
                    }    
                                    
                ],
                "content_html": "java_oop_abstraction.html"
            },
             {
                "sl_no": 7,
                "title": "Inheritance",
                "description": "Understanding the concept of inheritance in Java, including how to create subclasses and use superclasses.",
                "references": [
                    {
                        "title": "Inheritance in Java" ,
                        "link": "https://www.geeksforgeeks.org/inheritance-in-java/"
                    }, {
                        "title": "Inheritance in Java (Tamil)",
                        "link": "https://youtu.be/siFdmP3Eer8"
                    }                    
                ],
                "content_html": "java_oop_inheritance.html"
            },
            {
                "sl_no": 7.1,
                "title": "Inheritance Types",
                "description": "Understanding the concept of inheritance in Java, including how to create subclasses and use superclasses.",
                "references": [
                    {
                        "title": "Inheritance in Java" ,
                        "link": "https://www.geeksforgeeks.org/inheritance-in-java/"
                    }, {
                        "title": "Inheritance in Java (Tamil)",
                        "link": "https://youtu.be/siFdmP3Eer8"
                    }                    
                ],
                "content_html": "java_inheritance_types.html"
            },
            {
                "sl_no": 7.2,
                "title": "this & super keywords",
                "description":  "Understanding the use of 'this' and 'super' keywords in Java, including how to refer to the current object and the superclass.",
                "references": [
                    {
                        "title": "Inheritance in Java" ,
                        "link": "https://www.geeksforgeeks.org/inheritance-in-java/"
                    }, {
                        "title": "Inheritance in Java (Tamil)",
                        "link": "https://youtu.be/siFdmP3Eer8"
                    }                    
                ],
                "content_html": "java_this_super_keywords.html"
            },
            {
                "sl_no": 7.3,
                "title": "Object class in Java",
                "description":  "Understanding the Object class in Java, which is the root class of all classes in Java.",
                "references": [
                    {
                        "title": "Inheritance in Java" ,
                        "link": "https://www.geeksforgeeks.org/inheritance-in-java/"
                    }, {
                        "title": "Inheritance in Java (Tamil)",
                        "link": "https://youtu.be/siFdmP3Eer8"
                    }                    
                ],
                "content_html": "java_object_class_methods.html"
            },
            {
                "sl_no": 7.4,
                "title": "finalize() method in Java",
                "description": "Understanding the finalize() method in Java, which is used to perform cleanup operations before an object is garbage collected.",
                "references": [
                    
                ],
                "content_html": "java_finalize_method.html"
            },
            {
                "sl_no": 7.5,
                "title": "Method Overloading & Method Overriding in Java",
                "description":  "Understanding the concepts of method overloading and method overriding in Java, including how to define multiple methods with the same name but different parameters, and how to override methods in subclasses.",
                "references": [
                    {
                        "title": "Method Overloading in Java (Tamil)",
                        "link": "https://youtu.be/Mzlddw0AOkY"
                    },
                    {
                        "title": "Method Overriding in Java (Tamil)",
                        "link": "https://youtu.be/Kanv7fmIuJw"
                    }                                        
                ],
                "content_html": "java_method_overloading_overriding.html"
            },
             {
                "sl_no": 8,
                "title": "Polimorphism",
                "description": "Understanding the concept of polymorphism in Java, including method overloading and method overriding.",
                "references": [
                    {
                        "title": "Polimorphism in Java",
                        "link": "https://www.geeksforgeeks.org/polymorphism-in-java/"
                    }, {
                        "title": "Method Overloading in Java",
                        "link": "https://www.geeksforgeeks.org/method-overloading-in-java/"
                    },  
                    {
                        "title": "Method Overriding in Java",
                        "link": "https://www.geeksforgeeks.org/overriding-in-java/"
                    },                    
                    {
                        "title": "Polimorphism in Java",
                        "link": "https://youtu.be/98BsGEV4iGQ"
                    }                    
                ],
                "content_html": "java_oop_polymorphism.html"
            },
             {
                "sl_no": 9,
                "title": "Constructors, Init blocks, static blocks",
                "description": "Understanding the concept of constructors, init blocks, and static blocks in Java, including how to initialize objects and classes.",                
                "references": [
                                    
                ],
                "content_html": "java_constructors_init_static_blocks.html"
            },
            {
                "sl_no": 10,
                "title": "Types of Constructors",
                "description": "Understanding the different types of constructors in Java, including default constructors, parameterized constructors, and copy constructors.",                      
                "references": [
                                    
                ],
                "content_html": "java_constructors_types.html"
            },
            {
                "sl_no": "Code Examples",
                "title": "Java - Object Oriented Programming",
                "description": "Explore practical examples of Object-Oriented Programming concepts in Java, including classes, objects, inheritance, and polymorphism.",
                "references": [
                    {
                        "title": "https://github.com/Vinothgopi97/java_examples.git",
                        "link": "https://github.com/Vinothgopi97/java_examples.git"
                    }
                ],
                "content_html": "oops_java_files.html"
            },            
            {
                "sl_no": "Assignment",
                "title": "Java - Object Oriented Programming",
                "description": "Complete the following tasks:.",
                "references": [                                    
                ],
                "content_html": "java_oops_assignment.html"
            }
            
        ]
      },
      {
        "sl_no": 7,
        "title": "Java Basics Continuation",
        "subtopics": [
            {
                "sl_no": 7.1,
                "title": "String class in Java",
                "description": "Understanding the String class in Java, which is used to represent a sequence of characters.",
                "references": [
                                  
                ],
                "content_html": "java_string_class.html"
            },
            {
                "sl_no": 7.2,
                "title": "Introduction to Exception and Error in Java",
                "description": "Understanding the difference between exceptions and errors in Java, and how to handle them using try-catch blocks.",
                "references": [
                                  
                ],
                "content_html": "java_exception_error_intro.html"
            },
            {
                "sl_no": 7.3,
                "title": "Exception and Error in Java",
                "description": "Understanding the difference between exceptions and errors in Java, and how to handle them using try-catch blocks.",
                "references": [
                                  
                ],
                "content_html": "java_exception_error_details.html"
            },
            {
                "sl_no": 7.4,
                "title": "Exception Handling in Java - Overview",
                "description": "An overview of exception handling in Java, including the try-catch-finally blocks and the throw statement.",
                "references": [
                     {
                        "title": "Exception handling in Java (Tamil)",
                        "link": "https://youtu.be/cklET8UVxQI"
                    }          
                    
                ],
                "content_html": "java_exception_handling_overview.html"
            },
            {
                "sl_no": 7.5,
                "title": "Exception Handling in Java - Try-Catch-Finally",
                "description": "Understanding the try-catch-finally blocks in Java for handling exceptions.",                
                "references": [
                                  
                ],
                "content_html": "java_try_catch_finally.html"
            },
            {
                "sl_no": 7.6,
                "title": "Exception Handling in Java - multiple catch blocks",
                "description": "Understanding how to handle multiple exceptions using multiple catch blocks in Java.",                
                "references": [
                                  
                ],
                "content_html": "java_multiple_catch_blocks.html"
            },
            {
                "sl_no": 7.7,
                "title": "Custom Exception Handling in Java",
                "description": "Understanding how to create and throw custom exceptions in Java.",
                "references": [
                                  
                ],
                "content_html": "java_custom_exception_throw_throws.html"
            },{
                "sl_no": "Assignment",
                "title": "String and Exception Handling in Java",
                "description": "Complete the following tasks:.",
                "references": [
                                  
                ],
                "content_html": "java_string_exception_questions.html"
            }
            
        ],                  
        "practice_assignments": ["Compile Java manually", "View bytecode", "Simulate JVM memory"]
      },
      {
        "sl_no": 8,
        "title": "Threads in Java",
        "subtopics": [
            {
                "sl_no": 8.1,
                "title": "Introduction to Threads",
                "description": "Understanding the concept of threads in Java, including how to create and manage threads.",
                "references": [
                    {
                        "title": "Introduction to Threads in Java",
                        "link": "https://www.geeksforgeeks.org/java-threads/"
                    }, {
                        "title": "Threads in Java (Tamil)",
                        "link": "https://youtu.be/5CCcEXzYM3Q"
                    }                    
                ],
                "content_html": "java_threads_intro.html"
            },
            {
                "sl_no": 8.2,
                "title": "Thread Lifecycle",
                "description": "Understanding the lifecycle of a thread in Java, including states like new, runnable, blocked, waiting, timed waiting, and terminated.",
                "references": [
                    {
                        "title": "Thread Lifecycle in Java",
                        "link": "https://www.geeksforgeeks.org/lifecycle-and-states-of-a-thread-in-java/"
                    }, {
                        "title": "Thread Lifecycle in Java",
                        "link": "https://youtube.com/shorts/wxRKebyCG8Q?si=t5oB9LvgsJSO4lGG"
                    }                    
                ],
                "content_html": "java_thread_lifecycle.html"
            },
            {
                "sl_no": 8.3,
                "title": "Thread class",
                "description": "Understanding how to create threads in Java using the Thread class and Runnable interface.",
                "references": [
                    {
                        "title":"Creating Threads in Java",
                        "link":"https://www.geeksforgeeks.org/java-lang-thread-class-java/"
                    }                    
                ],
                "content_html": "java_thread_class_examples.html"
            },
            {
                "sl_no": "8.3.1",
                "title": "Thread baiscs",
                "description": "Understanding the basic concepts of threads in Java, including how to create and manage threads.",
                "references": [
                    {
                        "title": "Daemon Threads in Java",
                        "link": "https://www.geeksforgeeks.org/daemon-thread-java/"
                    } 
                    
                ],
                "content_html": "java_thread_basics.html"
            },
            {
                "sl_no": 8.4,
                "title": "Multiple Threads",
                "description": "Understanding how to create and manage multiple threads in Java, including thread synchronization and communication.",
                "references": [
                    {
                        "title": "Multiple Threads in Java",
                        "link": "https://www.geeksforgeeks.org/multithreading-in-java/"
                    }
                ],
                "content_html": "java_multiple_threads.html"
            },
              {
                "sl_no": 8.5,
                "title": "Thread Starvation",
                "description": "Understanding the concept of thread starvation in Java, which occurs when a thread is perpetually denied access to resources it needs to proceed.",
                
                "references": [
                    {
                        "title": "Thread Starvation in Java",
                        "link": "https://www.geeksforgeeks.org/thread-starvation-in-java/"
                    }, {
                        "title": "Thread Starvation in Java (Tamil)",
                        "link": "https://youtu.be/2b0g3k4a9dY"
                    }
                ],
                "content_html": "java_thread_starvation.html"
            },
            {
                "sl_no": 8.6,
                "title": "Thread Synchronization",
                "description": "Understanding the concept of thread synchronization in Java, including how to use synchronized methods",
                "references": [
                    {
                        "title": "Thread Synchronization in Java",
                        "link": "https://www.geeksforgeeks.org/synchronization-in-java/"
                    }, {
                        "title": "Thread Synchronization in Java (Tamil)",
                        "link": "https://youtu.be/2b0g3k4a9dY"
                    }                    
                ],
                 "content_html": "java_thread_synchronization.html"

            },
            {
                "sl_no": 8.7,
                "title": "Advantages and Disadvantages of Threads",
                "description": "Understanding the advantages and disadvantages of using threads in Java, including improved performance and complexity.",
                
                "references": [
                    {
                        "title": "Advantages and Disadvantages of Threads in Java",
                        "link": "https://www.geeksforgeeks.org/advantages-and-disadvantages-of-threads-in-java/"
                    }, {
                        "title": "Advantages and Disadvantages of Threads in Java (Tamil)",
                        "link": "https://youtu.be/2b0g3k4a9dY"
                    }
                ],
                 "content_html": "java_thread_advantages_disadvantages.html"

            }
            ,
            {
                "sl_no": 8.8,
                "title": "Runnable Interface",
                "description": "Understanding the Runnable interface in Java, which is used to define a task that can be executed by a thread.",                
                
                "references": [
                    {
                        "title": "Runnable Interface in Java",
                        "link": "https://www.geeksforgeeks.org/runnable-interface-in-java/"
                    }, {
                        "title": "Runnable Interface in Java (Tamil)",
                        "link": "https://youtu.be/r4n6_tv4Qsw?si=gSFAX8oVy7tC9J9D"
                    }
                ],
                 "content_html": "java_runnable_interface.html"

            },
            {
                "sl_no": 8.9,
                "title": "Callable Interface",
                "description": "Understanding the Callable interface in Java, which is similar to Runnable but can return a result and throw checked exceptions.",                
                
                "references": [
                    {
                        "title": "Callable Interface in Java",
                        "link": "https://www.geeksforgeeks.org/callable-interface-in-java/"
                    }, {
                        "title": "Callable Interface in Java (Tamil)",
                        "link": "https://youtu.be/2b0g3k4a9dY"
                    }
                ],
                 "content_html": "java_callable_interface.html"

            },
            {
                "sl_no": 8.9,
                "title": "Runnable vs Callable Interface",
                "description": "Understanding the differences between Runnable and Callable interfaces in Java, including their use cases and capabilities.",
                
                "references": [
                    {
                        "title": "Runnable vs Callable Interface in Java",
                        "link": "https://www.geeksforgeeks.org/runnable-vs-callable-interface-in-java/"
                    }, {
                        "title": "Runnable vs Callable Interface in Java (Tamil)",
                        "link": "https://youtu.be/2b0g3k4a9dY"
                    }
                ],
                 "content_html": "java_runnable_vs_callable.html"

            },
            {
                "sl_no": 8.10,
                "title": "Assignments",
                "description": "Complete the following tasks:.",
                
                "references": [
                   
                ],
                 "content_html": "java_threads_assignment.html"

            }
            
                
        ]
     },
      {
        "sl_no": 9,
        "title": "Java 7",
        "subtopics": [
            {
                "sl_no": 9.1,
                "title": "Java 7 - Introduction",
                "description": "An introduction to Java 7, including its new features and enhancements over previous versions.",                
                "references": [
                                  
                ],
                "content_html": "java7_introduction.html"
            },
            {
                "sl_no": 9.2,
                "title": "Try with Resources in Java 7",
                "description": "Understanding the try-with-resources statement in Java 7, which simplifies resource management by automatically closing resources when they are no longer needed.",
                "references": [
                                  
                ],
                "content_html": "java7_try_with_resources.html"
            },
            {
                "sl_no": 9.3,
                "title": "Strings in Switch in Java 7",
                "description": "Understanding the ability to use strings in switch statements in Java 7, which allows for more readable and maintainable code.",                
                "references": [
                                  
                ],
                "content_html": "java7_switch_string.html"
            },
            {
                "sl_no": 9.4,
                "title": "Binary Literals in Java 7",
                "description": "Understanding the use of binary literals in Java 7, which allows for more concise representation of binary values using the '0b' prefix.",
                "references": [
                                  
                ],
                "content_html": "java7_binary_literals.html"
            },
            {
                "sl_no": 9.5,
                "title": "Underscores in Numeric Literals in Java 7",
                "description": "Understanding the use of underscores in numeric literals in Java 7, which improves readability of large numbers by allowing underscores to be used as visual separators.",
                "references": [
                                  
                ],
                "content_html": "java7_underscores_numeric_literals.html"
            },
            {
                "sl_no": 9.6,
                "title": "Multi catch block in Java 7",
                "description": "Understanding the multi-catch block feature in Java 7, which allows multiple exceptions to be caught in a single catch block, reducing code duplication and improving readability.",
                "references": [
                                  
                ],
                "content_html": "java7_multi_catch.html"
            },
            {
                "sl_no": 9.7,
                "title": "Diamond Operator in Java 7",
                "description": "Understanding the diamond operator in Java 7, which simplifies the use of generics by allowing the compiler to infer the type parameters.",
                "references": [
                                  
                ],
                "content_html": "java7_diamond_operator.html"
            },
            
            {
                "sl_no": 9.8,
                "title": "Type inference in Java 7",
                "description": "Understanding type inference in Java 7, which allows the compiler to infer the type of a variable based on its context, reducing the need for explicit type declarations.",
                "references": [
                                  
                ],
                "content_html": "java7_type_inference.html"
            },
            {
                "sl_no": "9.9.1",
                "title": "NIO.2 Overview in Java 7",
                "description": "Understanding the NIO.2 (New Input/Output) package in Java 7, which provides improved file I/O capabilities and support for symbolic links.",
                "references": [
                                  
                ],
                "content_html": "java7_nio2_overview.html"
            },            
            {
                "sl_no": "9.9.1",
                "title": "NIO.2 Filesystem in Java 7",
                "description": "Understanding the NIO.2 Filesystem API in Java 7, which provides a more flexible and powerful way to work with files and directories.",
                "references": [
                                  
                ],
                "content_html": "java7_nio2_filesystem.html"
            },
            {
                "sl_no": 9.10,
                "title": "Fork/Join Framework in Java 7",
                "description": "Understanding the Fork/Join framework in Java 7, which provides a way to parallelize tasks and improve performance on multi-core processors.",
                "references": [
                                  
                ],
                "content_html": "java7_fork_join_framework.html"
            },
            {
                "sl_no": "Assignment",
                "title": "Java 7 Concepts",
                "description": "Complete the following tasks:.",
                "references": [
                                  
                ],
                "content_html": "java7_assignment.html"
            }
        ]
      },
      {
        "sl_no": 10,
        "title": "Java 8",
        "subtopics": [
            {
                "sl_no": 10.1,
                "title": "Java 8 - Introduction",
                "description": "An introduction to Java 8, including its new features and enhancements over previous versions.",       
                "references": [
                                  
                ],
                "content_html": "java8_concepts_list.html"
            },
            {
                "sl_no": 10.2,
                "title": "Default and Static Methods in Interfaces",
                "description": "Understanding the introduction of default and static methods in interfaces in Java 8, which allows interfaces to have method implementations.",
                "references": [
                                  
                ],
                "content_html": "java8_default_static_methods.html"
            },
            {
                "sl_no": 10.3,
                "title": "Functional Interfaces",
                "description": "Understanding functional interfaces in Java 8, which are interfaces with a single abstract method and can be used with lambda expressions.", 
                "references": [
                                
                ],
                "content_html": "java8_functional_interfaces.html"
            },
            {
                "sl_no": 10.4,
                "title": "Method References",
                "description": "Understanding method references in Java 8, which provide a way to refer to methods without invoking them, making code more concise and readable.",
                "references": [
                                  
                ],
                "content_html": "java8_method_references.html"
            },
            {
                "sl_no": 10.5,
                "title": "Nashorn Javascript",
                "description": "Understanding the Nashorn JavaScript engine in Java 8, which allows Java applications to execute JavaScript code and interact with Java objects.",
                "references": [
                                  
                ],
                "content_html": "java8_nashorn_javascript.html"
            },
            {
                "sl_no": 10.6,
                "title": "Date Time API",
                "description": "Understanding the new Date Time API introduced in Java 8, which provides a more comprehensive and flexible way to handle date and time operations compared to the previous Date and Calendar classes.",
                "references": [
                                  
                ],
                "content_html": "java8_new_date_time_api.html"
            },
            {
                "sl_no": 10.7,
                "title": "Optional Class",
                "description": "Understanding the Optional class in Java 8, which provides a way to represent optional values and avoid null pointer exceptions by encapsulating the presence or absence of a value.",
                "references": [
                                  
                ],
                "content_html": "java8_optional_class.html"
            },
            {
                "sl_no": 10.8,
                "title": "Stream APIs",
                "description": "Understanding the Stream API in Java 8, which provides a functional approach to processing sequences of elements, allowing for operations like filtering, mapping, and reducing collections in a more concise and readable manner.",
                "references": [
                                  
                ],
                "content_html": "java8_stream_api.html"
            },
            {
                "sl_no": 10.9,
                "title": "Parrallel Streams",
                "description": "Understanding parallel streams in Java 8, which allow for parallel processing of collections and improve performance by utilizing multiple CPU cores.",
                "references": [
                                  
                ],
                "content_html": "java8_parallel_streams.html"
            }
        ]
      },
      {
        "sl_no": 11,
        "title": "Java Collections",
        "subtopics": [
            {
                "sl_no": 11.1,
                "title": "Java Collections - Introduction",
                "description": "An introduction to Java Collections, including the Collection framework and its core interfaces such as List, Set, and Map.",
                "references": [
                          {
                        "title": "Java Collections",
                        "link": "https://www.geeksforgeeks.org/java/collections-in-java-2/"
                    }  
                ],
                "content_html": "java_collections_overview.html"
            },
            {
                "sl_no": 11.2,
                "title": "Java Collections - Hierarchy",
                "description": "Understanding the hierarchy of Java Collections, including the relationships between different collection types such as List, Set, and Map.",
                "references": [
                                  
                ],
                "content_html": "java_collection_hierarchy.html"
            },
            {
                "sl_no": 11.3,
                "title": "List Interface",
                "description": "Understanding the List interface in Java Collections, which represents an ordered collection of elements that can contain duplicates and allows positional access to elements.",
                "references": [
                                  
                ],
                "content_html": "java_list_interface.html"
            },
            {
                "sl_no": 11.4,
                "title": "ArrayList in Java",
                "description":  "Understanding the ArrayList class in Java, which is a resizable array implementation of the List interface, providing dynamic array capabilities and efficient random access to elements.",
                "references": [
                    {
                        "title": "ArrayList Vs LinkedList in Java",
                        "link": "https://www.baeldung.com/java-arraylist-linkedlist"
                    }  
                     
                ],
                "content_html": "java_arraylist_example.html"
            },
            {
                "sl_no": 11.5,
                "title": "LinkedList in Java",
                "description": "Understanding the LinkedList class in Java, which is a doubly-linked list implementation of the List interface, providing efficient insertion and deletion operations at both ends of the list.",
                "references": [
                                  
                ],
                "content_html": "java_linkedlist_example.html"
            },
            {
                "sl_no": 11.6,
                "title": "Vector in Java",
                "description": "Understanding the Vector class in Java, which is a growable array implementation of the List interface, providing synchronized access to elements and dynamic resizing capabilities.",
                "references": [
                                  
                ],
                "content_html": "java_vector_example.html"
            },
            {
                "sl_no": 11.7,
                "title": "Stack in Java",
                "description": "Understanding the Stack class in Java, which is a last-in-first-out (LIFO) data structure that extends the Vector class and provides methods for pushing and popping elements.",
                "references": [
                                  
                ],
                "content_html": "java_stack_example.html"
            }
            ,
            {
                "sl_no": 11.8,
                "title": "Set in Java",
                "description": "Understanding the Set interface in Java Collections, which represents a collection of unique elements that does not allow duplicates and provides operations for adding, removing, and checking the presence of elements.",
                "references": [
                                  
                ],
                "content_html": "java_set_interface.html"
            },
            {
                "sl_no": 11.9,
                "title": "HashSet in Java",
                "description": "Understanding the HashSet class in Java, which is an implementation of the Set interface that uses a hash table to store elements, providing constant-time performance for basic operations like add, remove, and contains.",
                "references": [
                                  
                ],
                "content_html": "java_hashset_example.html"
            },
            {
                "sl_no": 11.10,
                "title": "LinkedHashSet in Java",
                "description": "Understanding the LinkedHashSet class in Java, which is an implementation of the Set interface that maintains a linked list of the elements in the set, preserving the insertion order while providing constant-time performance for basic operations.",
                "references": [
                                  
                ],
                "content_html": "java_linkedhashset_example.html"
            },
            {
                "sl_no": 11.11,
                "title": "TreeSet in Java",
                "description": "Understanding the TreeSet class in Java, which is an implementation of the Set interface that uses a red-black tree to store elements in sorted order, providing logarithmic time performance for basic operations like add, remove, and contains.",
                "references": [
                                  
                ],
                "content_html": "java_treeset_example.html"
            },
            {
                "sl_no": 11.12,
                "title": "Queue in Java",
                "description": "Understanding the Queue interface in Java Collections, which represents a collection of elements that follows the first-in-first-out (FIFO) principle, allowing for efficient insertion and removal of elements at both ends.",
                "references": [
                                  
                ],
                "content_html": "java_queue_interface.html"
            },
            {
                "sl_no": 11.13,
                "title": "PriorityQueue in Java",
                "description": "Understanding the PriorityQueue class in Java, which is an implementation of the Queue interface that orders elements based on their natural ordering or a specified comparator, allowing for efficient retrieval of the highest or lowest priority element.",
                "references": [
                                  
                ],
                "content_html": "java_priorityqueue_example.html"
            },
            {
                "sl_no": 11.14,
                "title": "Deque in Java",
                "description": "Understanding the Deque interface in Java Collections, which represents a double-ended queue that allows for efficient insertion and removal of elements at both ends, supporting both stack and queue operations.",
                "references": [
                                  
                ],
                "content_html": "java_deque_interface.html"
            },
            {
                "sl_no": 11.15,
                "title": "Map in Java",
                "description": "Understanding the Map interface in Java Collections, which represents a collection of key-value pairs where each key is unique and maps to a specific value, allowing for efficient retrieval and manipulation of data based on keys.",
                "references": [
                                  
                ],
                "content_html": "java_map_interface.html"
            },
            {
                "sl_no": 11.16,
                "title": "HashMap in Java",
                "description": "Understanding the PriorityQueue class in Java, which is an implementation of the Queue interface that orders elements based on their natural ordering or a specified comparator, allowing for efficient retrieval of the highest or lowest priority element.",
                "references": [
                                  
                ],
                "content_html": "java_hashmap_example.html"
            },
            {
                "sl_no": 11.17,
                "title": "LinkedHashMap in Java",
                "description": "Understanding the Deque interface in Java Collections, which represents a double-ended queue that allows for efficient insertion and removal of elements at both ends, supporting both stack and queue operations.",
                "references": [
                                  
                ],
                "content_html": "java_linkedhashmap_example.html"
            },
            {
                "sl_no": 11.18,
                "title": "TreeMap in Java",
                "description": "Understanding the TreeMap class in Java, which is an implementation of the Map interface that uses a red-black tree to store key-value pairs in sorted order based on the keys, providing logarithmic time performance for basic operations like put, get, and remove.",
                "references": [
                                  
                ],
                "content_html": "java_treemap_example.html"
            },
            {
                "sl_no": 11.19,
                "title": "Collection Utilities in Java",
                "description": "Understanding the utility classes in Java Collections, such as Collections and Arrays, which provide static methods for common operations like sorting, searching, and manipulating collections and arrays.",
                "references": [
                                  
                ],
                "content_html": "java_collections_utilities.html"
            },
             {
                "sl_no": "Assignment",
                "title": "Collection in Java",
                "description": "Complete the following tasks:.",
                "references": [
                                  
                ],
                "content_html": "java-collections-assignment.html"
            }
        ]
    }
    ]
  }